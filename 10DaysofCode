#Python code

#Day2
#To find no. of trailing zeros in a factorial of input x
#to find no. of products having  zeros in units place
#find occurences of 5 which are of course less than occurences of 2 or no.s with factors 2
#eg. 10!=1.2.3.4.5.6.7.8.9.10=....*(2*5)*(10)= ...*100
#no. of occurences of 5 in x! =floor(x/5)+floor(x/5^2)+floor(x/5^3)+floor(x/5^4)+....until floor(x/5^y)>=0
#eg. x=10:  no. of occurences of 5 in x! = floor(10/5) +floor(10/5^2)+...= floor(10/5) +floor(10/25)+... =2+0+...=2
#eg. x=100:  no. of occurences of 5 in x! = floor(100/5) +floor(100/5^2)+floor(100/5^3)+... =20+4+0...=24


n=int(input())
ans=0
p=5
while(n/p>0):
	ans+=n//p
	p*=5
print(ans)


#Day4 
#To count no. of bits set

#method 1: TC(Time Complexity)= O(n),n=no. of bits a no. can be represented into.
t=int(input())
for _ in range(t):
	n=int(input())
	noOfBitsSet=0
	while(n>0):
		noOfBitsSet+=n&1
		n>>=1
	print(noOfBitsSet)
  
#method 2:TC(Time Complexity)= O(n),n=no. of bits set
t=int(input())
for _ in range(t):
	n=int(input())
	noOfBitsSet=0
	while(n>0):	
		n=(n) & (n-1)
		noOfBitsSet+=1
	print(noOfBitsSet)
  

#gcd
a=int(input())
b=int(input())
def gcd(a,b):
	if b!=0:
		return gcd(b,a%b)
	else:
		return a
print(gcd(b,a%b))

#gcd*lcm=a*b

#Day6
#Prime visits
#instead of calculating them again & again we generate prime or not boolean array till max no. 
# then find prefix array of them using
#sieve of Erastosthenes

mod=1000000
primeBool=[0]*(mod+1)
#special cases
primeBool[2]=1
#primeBool[1]=primeBool[0]=0
#cumulative/prefix array
prefix=[0]*(mod+1)

for i in range(3,mod+1,2):
	primeBool[i]=1
for i in range(3,mod+1,2):
	if primeBool[i]==1:
		
		for j in range(i*i,mod+1,i):
			primeBool[j]=0

for i in range(1,mod+1):
	prefix[i]=primeBool[i]+prefix[i-1]

t=int(input())
for _ in range(t):
	a,b=map(int,input().split())
	print(prefix[b]-prefix[a-1])


#rotate image anti clockwise by 90 degrees
#approach
#reverse each row, then transpose

#divisible subarrays...find no. of good subarrays with sum sdivisible by n, n=no.of ele in array
#pigeonhole approach
t=int(input())
for _ in range(t):
	pre=[0]*1000000
	ans=0
	pre[0]=1
	n=int(input())
	a=list(map(int,input().split()))
	sumy=0
	for i in a:
		sumy+=i
		sumy=(sumy+n)%n
		pre[sumy]+=1
	for i in pre[:n]:
		ans+=i*(i-1)//2#pairsC2
	print(int(ans))
#day 9
#str tokenizer : to be edited

#Day 10
#perform binary search on rotated sorted array
#to be edited
